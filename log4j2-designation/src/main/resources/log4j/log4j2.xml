<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="warn" monitorInterval="30">


    <!-- 参数配置 -->
    <Properties>
        <!-- 项目名称 -->
        <property name="project_name">designation</property>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">logs/${project_name}</Property>

        <!-- 日志格式化 -->
        <property name="console_pattern_layout">
            %d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n
        </property>
        <!-- info 级别格式 -->
        <property name="info_pattern">
            [%d{HH:mm:ss:SSS}] [%p] - %l - %m%n
        </property> <!-- warn 级别格式 -->
        <property name="warn_pattern">
            [%d{HH:mm:ss:SSS}] [%p] - %l - %m%n
        </property> <!-- error 级别格式 -->
        <property name="error_pattern">
            [%d{HH:mm:ss:SSS}] [%p] - %l - %m%n
        </property>

        <!-- 日志输出的格式
           %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
           %-5p (level) : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
           %c (logger) : logger的名称(%logger)
           %t (thread) : 输出当前线程名称
           %m : 日志内容，即 logger.info("message")
           %n : 换行符
           %C : Java类名(%F)
           %L : 行号
           %M : 方法名
           %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
           hostName : 本地机器名
           hostAddress : 本地ip地址
        -->

        <!-- 示例 -->
        <!-- %highlight{%d{yyyy-MM-dd HH:mm:ss.SSS} [%5level][%logger{36}]-(%t)} %m%n-->
    </Properties>


    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式
            %highlight 高亮
            -->
            <PatternLayout pattern="${console_pattern_layout}"/>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="logs/${project_name}.log" append="false">
            <PatternLayout pattern="${console_pattern_layout}"/>
            <Filters>
                <!-- 配置的日志过滤
                如果要输出的日志级别在当前级别及以上，则为match，否则走mismatch
                ACCEPT  ： 执行日志输出；
                DENY    ： 不执行日志输出，结束过滤；
                NEUTRAL ： 不执行日志输出，执行下一个过滤器
                -->
                <!--控制台只输出设置的level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <ThresholdFilter level="TRACE" onMatch="ACCEPT"/>
            </Filters>
        </File>
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
        fileName 中支持通配符 ${sys:user.home} 表示用户home目录-->

        <!--
           循环日志文件配置：日志文件大于阀值的时候，就开始写一个新的日志文件
           这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
           fileName    : 指定当前日志文件的位置和文件名称
           filePattern : 指定当发生Rolling时，文件的转移和重命名规则
           SizeBasedTriggeringPolicy : 指定当文件体积大于size指定的值时，触发Rolling
           DefaultRolloverStrategy : 指定最多保存的文件个数
           TimeBasedTriggeringPolicy : 这个配置需要和filePattern结合使用
               注意filePattern中配置的文件重命名规则是${FILE_NAME}_%d{yyyy-MM-dd}_%i，最小的时间粒度是dd，即天，
               TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1天生成一个新文件
       -->

        <!-- 另一个循环日志配置方式： 日志出现不同步，谨慎使用。
        RollingRandomAccessFile 默认日志文件写入策略为异步刷盘，引出一个缓冲区（buffer）的概念。
        将日志信息先写入到缓冲区，然后缓冲区满后刷到磁盘，并清空缓冲区，默认缓冲区的大小在8-256kb，具体大小需要自己设置。
        -->

        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <!-- 这里的日志类似流一样的进入 RollingFileInfo ， 然后经过 ThresholdFilter 进行过滤。
                    ps:这里就是坑了，如果ThresholdFilter的顺序不一样的话，输入的结果是不一样的！！！
                    因为经过ThresholdFilter的时候，如果有匹配项，则直接打印日志了，所以需要把高等级的日志级别放在前面
                    并且，onMatch属性设置为DENY，过滤掉高等级的日志；onMismatch设置为NEUTRAL，把低等级的日志放行，
                    到我们想要的级别后，onMache设为ACCEPT，获取到日志，并onMismatch设置为DENY，丢弃低等级日志，并执行结束
                -->
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${info_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="500 KB"/>
                <DefaultRolloverStrategy max="20"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/warn.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${warn_pattern}"/>
            <Policies>
                <!-- interval表示多久滚动一次，默认是1 hour。
                modulate=true用来调整时间，如果interval=4，将时间调整到4的整倍数，否则以项目启动的时间计算-->
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/error.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="${error_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="200 KB"/>
            </Policies>
        </RollingFile>

    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效
        Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
        level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
        name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.

        AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.
        如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，
        此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
    -->
    <loggers>
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="INFO">
        </logger>
        <logger name="org.mybatis" level="INFO">
        </logger>
        <logger name="net.gaox.designation" level="all">
            <!--            <AppenderRef ref="log"/>-->
        </logger>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="log"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>
</configuration>